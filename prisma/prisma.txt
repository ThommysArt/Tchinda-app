datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

 
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}




model Driver {
  driver_id          String   @id @default(uuid())
  driver_uname      String
  name              String
  date_of_birth     DateTime
  phone_number      String
  password          String
  casier_judiciere  String
  CNI               String
  plan_de_localisation String
  garant_name       String
  garant_phone      String
  tasks             Task[]
  trips             Trip[]
}

model Tchinda {
  tchinda_id        String   @id @default(uuid())
  tchinda_uname     String
  name              String
  date_of_birth     DateTime
  phone_number      String
  password          String
  casier_judiciere  String
  CNI               String
  plan_de_localisation String
  garant_name       String
  garant_phone      String
  tasks             Task[]
  trips             Trip[]
}

model Task {
  task_id           String   @id @default(uuid())
  driver_id         String
  tchinda_id        String
  status            String
  price             Float
  driver            Driver   @relation(fields: [driver_id], references: [driver_id])
  tchinda           Tchinda  @relation(fields: [tchinda_id], references: [tchinda_id])
  bills             Bill[]
  trips             Trip[]
}

model Bill {
  bill_id           String   @id @default(uuid())
  task_id           String
  amount            Float
  payment_status     String  // e.g., 'Paid', 'Pending', 'Cancelled'
  created_at       DateTime @default(now())
  task             Task     @relation(fields: [task_id], references: [task_id])
}

model Trip {
  trip_id           String   @id @default(uuid())
  driver_id         String
  tchinda_id        String
  task_id           String
  trip_date         DateTime @default(now())
  pickup_location    String
  dropoff_location   String
  status            String  // e.g., 'Completed', 'In Progress', 'Cancelled'
  driver            Driver   @relation(fields: [driver_id], references: [driver_id])
  tchinda           Tchinda  @relation(fields: [tchinda_id], references: [tchinda_id])
  task             Task     @relation(fields: [task_id], references: [task_id])
}